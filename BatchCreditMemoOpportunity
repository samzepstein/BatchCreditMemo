global class BatchCreditMemoOpportunity implements Database.Batchable<SObject>, Database.Stateful{
    
    global Set<Id> cmOppIds = new Set<Id>();
    global String cmReason;
    global Boolean needsRev;
    global Boolean isInternal;
    global Id oppId;
    global Opportunity creditOppty;
    
    
    
    global BatchCreditMemoOpportunity(String cmReason, Boolean needsRev, Boolean isInternal, Opportunity creditOppty){
        this.cmReason = cmReason;
        this.needsRev = needsRev;
        this.isInternal = isInternal;
        this.creditOppty = creditOppty;
        this.oppId = creditOppty.id;
        
    }
    
    
    global Database.QueryLocator start(Database.BatchableContext bc) {
        
        system.debug('start');
        
        String thisOpp = Test.isRunningTest() ?  '[SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate,'+
            'Po_Number__c, Intacct_Invoice_Number_v2__r.Name'+
            'FROM Opportunity LIMIT 1]' : '[SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate,'+
                'Po_Number__c, Intacct_Invoice_Number_v2__r.Name'+ 
                'FROM Opportunity WHERE Id = :oppId]';
        
        
        return Database.getQueryLocator(thisOpp);
        
        
    }
    
    public Opportunity getCreditOppty(){
        this.creditOppty = [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate, 
                            Po_Number__c, Intacct_Invoice_Number_v2__r.Name 
                            FROM Opportunity 
                            WHERE Id = :creditOppty.Id];
        return creditOppty;
    }
    
    public List<Opportunity> returnOppty(Id oppId){
        DescribeSObjectResult describeResult = oppId.getSObjectType().getDescribe();
        //getting every field on Opp
        List<String> fieldNames = new List<String>( describeResult.fields.getMap().keySet() );	
        String query =  ' SELECT ' + String.join( fieldNames, ',' ) + 
            ' FROM ' + describeResult.getName() + 
            ' WHERE ' + ' id = :oppId ' + ' LIMIT 1 ';	
        
        List<SObject> records = Database.query( query );	
        return records;
    }
    
    global Opportunity createCreditMemoOpp(){
        
        Opportunity cmOppty = returnOppty(creditOppty.Id)[0].clone();
        
        cmOppty.Name = creditOppty.Name + ' - CM';
        cmOppty.StageName = 'Closing';
        cmOppty.CloseDate = System.today();
        cmOppty.PO_number__c += '-CM';
        cmOppty.Secondary_Type__c = 'CM';
        cmOppty.Invoiced__c = False;
        cmOppty.Probability = 90.00;
        cmOppty.CM_Intacct_Invoice_Number__c = creditOppty.Intacct_Invoice_Number_v2__r.Name;
        cmOppty.SBQQ__Contracted__c = false;
        cmOppty.Intacct_Invoice_Number_v2__c = null;
        cmOppty.Do_not_send_welcome_letter__c = true;
        cmOppty.Active_Checkbox__c = false;
        cmOppty.SBQQ__PrimaryQuote__c = null;
        cmOppty.unexpired_contract__c = false;
        cmOppty.CM_REV_Reason__c = cmReason;
        cmOppty.Credited_Opportunity__c = creditOppty.Id;
        
        
        return cmOppty;
        
        
    }
    
    global Opportunity createRevisedOpp(Opportunity cmOppty){
        
        Opportunity revOppty = cmOppty.clone();
        
        revOppty.Name = creditOppty.Name + ' - REV';
        revOppty.Secondary_Type__c = null;
        revOppty.PO_number__c = creditOppty.Po_Number__c + '-REV';
        revOppty.CM_Opportunity__c = cmOppty.Id;
        revOppty.Credited_Opportunity__c = creditOppty.Id;
        revOppty.CM_Intacct_Invoice_Number__c = null;
        revOppty.Exclude_from_Xactly__c = True;
        revOppty.Do_not_Send_Invoice__c = isInternal;
        return revOppty;
        
        
    }
    
    
    
    
    global void execute(Database.BatchableContext bc, List<Opportunity> scope){
        
        List<Opportunity> cmOppList = new List<Opportunity>();
        List<Opportunity> revOppList = new List<Opportunity>();
        List<Opportunity> creditOpptyList = new List<Opportunity>();

        
        
        Map <ID, Opportunity> oppMap = new Map <ID, Opportunity>(scope);
        
        Opportunity cmOpp = createCreditMemoOpp();
        
        If(needsRev = TRUE){
            
            Opportunity revOpp = createRevisedOpp(cmOpp);
            
            
            cmOpp.Exclude_from_Xactly__c = True;
            cmOpp.REV_Opportunity__c = revOpp.Id;
            
            
            creditOppty.CM_REV_Reason__c = cmReason;
            creditOppty.REV_Opportunity__c = revOpp.Id;
            creditOppty.CM_Opportunity__c = cmOpp.Id;
           
            revOppList.add(revOpp);
			creditOpptyList.add(creditOppty);            

            
        }
        
        cmOppList.add(cmOpp);
        
        
        
        Id cmOppId = cmOpp.Id;
        
        //list of CM ids to be sent to batch quote creation
        cmOppIds.add(cmOppId);
        
        
        
        
        system.debug('execute');
        
    }
    
    global void finish(Database.BatchableContext bc){
        
        //Database.executeBatch(new BatchRenewalQuote(new List<Id>(cmoOppIds)));
        
        system.debug('finish');
    }
    
}
