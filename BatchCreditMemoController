global class BatchCreditMemoController implements Database.Batchable<SObject>, Database.Stateful{
    
    // public Opportunity creditOpptyId;
    global Opportunity creditOppty;
    
    global String cmReason{get; set;}
    global Boolean needsRev{get; set;}
    global Boolean isInternal{get; set;}
    
    
    global Database.QueryLocator start(Database.BatchableContext bc) {
    
        system.debug('batch start');
        
        Opportunity thisOpp = Test.isRunningTest() ?  [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate,
                                   Po_Number__c, Intacct_Invoice_Number_v2__r.Name 
                                   FROM Opportunity LIMIT 1] : [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate,
                                   Po_Number__c, Intacct_Invoice_Number_v2__r.Name 
                                   FROM Opportunity 
                                   WHERE Id = :ApexPages.currentPage().getParameters().get(id)];
        
        this.creditOppty = thisOpp;
                                       
        return Database.getQueryLocator(thisOpp);
    }
    /*public creditMemController(ApexPages.StandardController controller){
        // this.creditOpptyId = (Opportunity) controller.getRecord();
        if(!Test.isRunningTest()){
            Opportunity thisOpp = [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate, 
                                   Po_Number__c, Intacct_Invoice_Number_v2__r.Name 
                                   FROM Opportunity 
                                   WHERE Id = :ApexPages.currentPage().getParameters().get('id')];
            this.creditOppty = thisOpp;
        }
        // this.creditOpptyId = thisOpp.Id;
    }
    
    
    /*
public Opportunity getCreditOppty(){
this.creditOppty = [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate, 
Po_Number__c, Intacct_Invoice_Number_v2__r.Name 
FROM Opportunity 
WHERE Id = :creditOpptyId.Id];
return creditOppty;
}
*/
    
    //used to gather every opp field name to create clone
    public List<Opportunity> returnOppty(Id oppId){
        DescribeSObjectResult describeResult = oppId.getSObjectType().getDescribe();
        //getting every field on Opp
        List<String> fieldNames = new List<String>( describeResult.fields.getMap().keySet() );	
        String query =  ' SELECT ' + String.join( fieldNames, ',' ) + 
            ' FROM ' + describeResult.getName() + 
            ' WHERE ' + ' id = :oppId ' + ' LIMIT 1 ';	
        
        List<SObject> records = Database.query( query );	
        return records;
    }
    
    public static SBQQ__Quote__c createQuote(Id opId, SBQQ__Quote__c qte){
        SBQQ__Quote__c newQuote = new SBQQ__Quote__c(SBQQ__Type__c = qte.SBQQ__Type__c,
                                                     SBQQ__Primary__c = True,
                                                     SBQQ__Status__c = 'Draft',
                                                     SBQQ__Opportunity2__c = opId,
                                                     SBQQ__Account__c = qte.SBQQ__Account__c);
        insert newQuote;
        
        return newQuote;
    }
    
    public static void createQuoteLines(Id opId, SBQQ__Quote__c qt, List<SBQQ__QuoteLine__c> creditQtLines,Integer i){
        List<SBQQ__QuoteLine__c> qlList = new List<SBQQ__QuoteLine__c>();
        
        System.debug('Test Oppty QL for credit: ' + creditQtLines);
        
        for(SBQQ__QuoteLine__c ql : creditQtLines) {
            SBQQ__QuoteLine__c qLEntry = new SBQQ__QuoteLine__c(
                SBQQ__Quote__c = qt.Id,
                SBQQ__StartDate__c = ql.SBQQ__StartDate__c,
                SBQQ__EndDate__c = ql.SBQQ__EndDate__c,
                SBQQ__Quantity__c = ql.SBQQ__Quantity__c * i,
                SBQQ__DiscountSchedule__c = ql.SBQQ__DiscountSchedule__c,
                SBQQ__Product__c = ql.SBQQ__Product__c,
                End_User__c  = qt.SBQQ__Account__c,
                Deal_Type__c = ql.Deal_Type__c,
                Sales_Discount__c = ql.Sales_Discount__c,
                SBQQ__OptionDiscount__c = ql.SBQQ__OptionDiscount__c,
                SBQQ__OptionLevel__c = ql.SBQQ__OptionLevel__c,
                SBQQ__OptionType__c = ql.SBQQ__OptionType__c);
            
            qlList.add(qlEntry);
        }
        
        insert qlList;
        System.debug('QuoteLines Created: ' + qlList);
    }
    
    //don't need, can remove -- add Price_List = qte.PriceList
    @future
    public static void setPriceList(Id qId, String priceList, Id rep){
        SBQQ__Quote__c q = [SELECT Id FROM SBQQ__Quote__c WHERE Id = :qId LIMIT 1];
        q.Price_List__c = priceList;
        q.Partner_Rep__c = rep;
        update q;
    }
    
    public PageReference createCM(){
        
        if(Test.isRunningTest()){
            needsRev = True;
            cmReason = 'This is a test';
            isInternal = True;
            creditOppty = [SELECT Name, Contract_Start_Date__c, Contract_End_Date__c, CloseDate, 
                           Po_Number__c, Intacct_Invoice_Number_v2__r.Name
                           FROM Opportunity 
                           WHERE Name = 'CreditMemo Test Oppty' LIMIT 1];
        }
        
        Opportunity cmOppty = returnOppty(creditOppty.Id)[0].clone();
        
        cmOppty.Name = creditOppty.Name + ' - CM';
        cmOppty.StageName = 'Closing';
        cmOppty.CloseDate = System.today();
        cmOppty.PO_number__c += '-CM';
        cmOppty.Secondary_Type__c = 'CM';
        cmOppty.Invoiced__c = False;
        cmOppty.Probability = 90.00;
        cmOppty.CM_Intacct_Invoice_Number__c = creditOppty.Intacct_Invoice_Number_v2__r.Name;
        cmOppty.SBQQ__Contracted__c = false;
        cmOppty.Intacct_Invoice_Number_v2__c = null;
        cmOppty.Do_not_send_welcome_letter__c = true;
        cmOppty.Active_Checkbox__c = false;
        cmOppty.SBQQ__PrimaryQuote__c = null;
        cmOppty.unexpired_contract__c = false;
        cmOppty.CM_REV_Reason__c = cmReason;
        cmOppty.Credited_Opportunity__c = creditOppty.Id;
        
        Opportunity revOppty = cmOppty.clone();
        
        insert cmOppty;
        
        if(needsRev){
            revOppty.Name = creditOppty.Name + ' - REV';
            revOppty.Secondary_Type__c = null;
            revOppty.PO_number__c = creditOppty.Po_Number__c + '-REV';
            revOppty.CM_Opportunity__c = cmOppty.Id;
            revOppty.Credited_Opportunity__c = creditOppty.Id;
            revOppty.CM_Intacct_Invoice_Number__c = null;
            revOppty.Exclude_from_Xactly__c = True;
            revOppty.Do_not_Send_Invoice__c = isInternal;
            insert revOppty;
            
            cmOppty.Exclude_from_Xactly__c = True;
            cmOppty.REV_Opportunity__c = revOppty.Id;
            creditOppty.CM_REV_Reason__c = cmReason;
            creditOppty.REV_Opportunity__c = revOppty.Id;
            creditOppty.CM_Opportunity__c = cmOppty.Id;
            
            
            List<Opportunity> opptyList = new List<Opportunity>{cmOppty, revOppty, creditOppty};
                update opptyList;
        }
        
        else{
            creditOppty.CM_Opportunity__c = cmOppty.Id;
            creditOppty.CM_REV_Reason__c = cmReason;
            update creditOppty;
        }
        
        //gets passed into createQuote method as qte
        SBQQ__Quote__c creditQuote = [SELECT SBQQ__Type__c,SBQQ__Account__c, Price_List__c, Partner_Rep__c 
                                      FROM SBQQ__Quote__c 
                                      WHERE SBQQ__Opportunity2__c = :creditOppty.Id AND SBQQ__Primary__c = True 
                                      LIMIT 1];
        
        
        //passed into createQuoteLines method
        List<SBQQ__QuoteLine__c> creditQuoteLines = [SELECT SBQQ__StartDate__c, SBQQ__EndDate__c, SBQQ__Quantity__c,
                                                     SBQQ__DiscountSchedule__c, SBQQ__Product__c, Deal_Type__c, Sales_Discount__c,
                                                     SBQQ__OptionDiscount__c, SBQQ__OptionLevel__c, SBQQ__OptionType__c
                                                     FROM SBQQ__QuoteLine__c 
                                                     WHERE SBQQ__Quote__c = :creditQuote.Id];       
        
        //cast a list of opps in a batch, create quote for each of the opps
        //
        //created quuote and quote lines for CM opp
        SBQQ__Quote__C cmQuote = createQuote(cmOppty.Id, creditQuote);
        createQuoteLines(cmOppty.Id, cmQuote, creditQuoteLines,-1);
        setPriceList(cmQuote.Id, creditQuote.Price_List__c, creditQuote.Partner_Rep__c);
        
        
        //created quuote and quote lines for rev Opp
        If(needsRev){
            SBQQ__Quote__c revQuote = createQuote(revOppty.Id,creditQuote);
            createQuoteLines(cmOppty.Id, revQuote, creditQuoteLines,1);
            setPriceList(revQuote.Id, creditQuote.Price_List__c, creditQuote.Partner_Rep__c);
        }
        
        String addrs = '/'+ cmOppty.Id;
        
        //navigate too one page from another, remove two bottom lines with batch
        PageReference pr = new PageReference(addrs);
        return pr;
    }
    
}
